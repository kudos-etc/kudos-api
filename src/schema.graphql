schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface IDataSource {
  name: DataSourceApp!
  url: AWSURL!
}

union DataSourceMetadata = GitHubMetadata | SlackMetadata

type GitHubMetadata implements IDataSource {
  item: GitHubItem
  name: DataSourceApp!
  owner: String!
  repo: String
  team: String
  url: AWSURL!
}

type GitHubMetadataConnection {
  items: [GitHubMetadata]
  nextToken: String
}

type Kudo
  @key(fields: ["giverUsername", "receiverUsername"], name: "byPerson")
  @model {
  createdAt: AWSDateTime!
  dataSource: DataSourceMetadata
  giver: Person @connection(fields: ["giverUsername"], keyName: "byUsername")
  giverUsername: String!
  id: ID!
  kudoVerb: KudoVerb!
  message: String!
  receiver: Person
    @connection(fields: ["receiverUsername"], keyName: "byUsername")
  receiverUsername: String!
}

type KudoConnection {
  items: [Kudo]
  nextToken: String
}

type Mutation {
  createGitHubMetadata(input: CreateGitHubMetadataInput!): GitHubMetadata
  createKudo(input: CreateKudoInput!): Kudo
  createPerson(input: CreatePersonInput!): Person
  deleteGitHubMetadata(input: DeleteGitHubMetadataInput!): GitHubMetadata
  deleteKudo(input: DeleteKudoInput!): Kudo
  deletePerson(input: DeletePersonInput!): Person
  updateGitHubMetadata(input: UpdateGitHubMetadataInput!): GitHubMetadata
  updateKudo(input: UpdateKudoInput!): Kudo
  updatePerson(input: UpdatePersonInput!): Person
}

type Person @key(fields: ["username"], name: "byUsername") @model {
  email: ID!
  id: ID!
  kudosGiven: [Kudo] @connection(fields: ["username"], keyName: "byGiver")
  kudosReceived: [Kudo] @connection(fields: ["username"], keyName: "byReceiver")
  username: String!
}

type PersonConnection {
  items: [Person]
  nextToken: String
}

type Query {
  getGitHubMetadata(url: AWSURL!): GitHubMetadata
  getKudo(createdAt: AWSDateTime, id: ID): Kudo
  getKudosByUsername(username: String!): [Kudo]
  getPerson(id: ID!, username: String!): Person
  listGitHubMetadata(
    filter: TableGitHubMetadataFilterInput
    limit: Int
    nextToken: String
  ): GitHubMetadataConnection
  listKudos(
    filter: TableKudoFilterInput
    limit: Int
    nextToken: String
  ): KudoConnection
  listPeople(
    filter: TablePersonFilterInput
    limit: Int
    nextToken: String
  ): PersonConnection
}

type SlackMetadata implements IDataSource {
  name: DataSourceApp!
  url: AWSURL!
}

type Subscription {
  onCreateGitHubMetadata(
    owner: String
    repo: String
    team: String
    url: AWSURL
  ): GitHubMetadata @aws_subscribe(mutations: ["createGitHubMetadata"])
  onCreateKudo(
    createdAt: AWSDateTime
    giverUsername: String
    id: ID
    message: String
    receiverUsername: String
  ): Kudo @aws_subscribe(mutations: ["createKudo"])
  onCreatePerson(email: ID, id: ID, username: String): Person
    @aws_subscribe(mutations: ["createPerson"])
  onDeleteGitHubMetadata(
    owner: String
    repo: String
    team: String
    url: AWSURL
  ): GitHubMetadata @aws_subscribe(mutations: ["deleteGitHubMetadata"])
  onDeleteKudo(
    createdAt: AWSDateTime
    giverUsername: String
    id: ID
    message: String
    receiverUsername: String
  ): Kudo @aws_subscribe(mutations: ["deleteKudo"])
  onDeletePerson(email: ID, id: ID, username: String): Person
    @aws_subscribe(mutations: ["deletePerson"])
  onUpdateGitHubMetadata(
    owner: String
    repo: String
    team: String
    url: AWSURL
  ): GitHubMetadata @aws_subscribe(mutations: ["updateGitHubMetadata"])
  onUpdateKudo(
    createdAt: AWSDateTime
    giverUsername: String
    id: ID
    message: String
    receiverUsername: String
  ): Kudo @aws_subscribe(mutations: ["updateKudo"])
  onUpdatePerson(email: ID, id: ID, username: String): Person
    @aws_subscribe(mutations: ["updatePerson"])
}

enum DataSourceApp {
  github
  slack
  teams
  twitter
}

enum GitHubItem {
  discussion
  issue
  pullRequest
  teamPost
}

enum KudoVerb {
  fireworks
  kudos
  props
  sparkles
}

input CreateGitHubMetadataInput {
  owner: String!
  repo: String
  team: String
  url: AWSURL!
}

input CreateKudoConnectionInput {
  nextToken: String!
}

input CreateKudoInput {
  createdAt: AWSDateTime!
  giverUsername: String!
  id: ID!
  message: String!
  receiverUsername: String!
}

input CreatePersonInput {
  email: ID!
  id: ID!
  username: String!
}

input DeleteGitHubMetadataInput {
  url: AWSURL!
}

input DeleteKudoConnectionInput {
  nextToken: String!
}

input DeleteKudoInput {
  createdAt: AWSDateTime!
  id: ID!
}

input DeletePersonInput {
  id: ID!
  username: String!
}

input GitHubMetadataInput {
  item: GitHubItem
  name: DataSourceApp!
  owner: String!
  repo: String
  team: String
  url: AWSURL!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableGitHubMetadataFilterInput {
  owner: TableStringFilterInput
  repo: TableStringFilterInput
  team: TableStringFilterInput
  url: TableStringFilterInput
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableKudoConnectionFilterInput {
  nextToken: TableStringFilterInput
}

input TableKudoFilterInput {
  createdAt: TableStringFilterInput
  giverUsername: TableStringFilterInput
  id: TableIDFilterInput
  message: TableStringFilterInput
  receiverUsername: TableStringFilterInput
}

input TablePersonFilterInput {
  email: TableIDFilterInput
  id: TableIDFilterInput
  username: TableStringFilterInput
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateGitHubMetadataInput {
  owner: String
  repo: String
  team: String
  url: AWSURL!
}

input UpdateKudoConnectionInput {
  nextToken: String!
}

input UpdateKudoInput {
  createdAt: AWSDateTime!
  giverUsername: String
  id: ID!
  message: String
  receiverUsername: String
}

input UpdatePersonInput {
  email: ID
  id: ID!
  username: String!
}
